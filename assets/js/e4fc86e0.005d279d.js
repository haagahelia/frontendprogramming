"use strict";(self.webpackChunkfrontendcourse=self.webpackChunkfrontendcourse||[]).push([[3948],{5073:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/coverage-1b352d9d1729afd8dbd0fd71e256d759.PNG"},6742:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/vitest_run-3cd0ce5ebc29c6c7ba915e595ae3fbcd.PNG"},7903:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"testing/vitest","title":"Vitest","description":"Vitest (https://vitest.dev/) is a testing framework that can be used easily with vite projects. Vitest provides a Jest like API that is good replacement in the most cases. Vitest also includes the common features required when setting up unit tests (mocking, snapshots, coverage)","source":"@site/docs/testing/vitest.md","sourceDirName":"testing","slug":"/testing/vitest","permalink":"/frontendprogramming/docs/testing/vitest","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Vitest","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"JavaScript Testing","permalink":"/frontendprogramming/docs/testing/"},"next":{"title":"Deployment","permalink":"/frontendprogramming/docs/category/deployment"}}');var i=n(4848),o=n(8453);const r={title:"Vitest",sidebar_position:3},d=void 0,a={},c=[{value:"Configuration",id:"configuration",level:3},{value:"Running tests",id:"running-tests",level:3},{value:"Testing React components",id:"testing-react-components",level:3},{value:"Creating tests",id:"creating-tests",level:3},{value:"fireEvent",id:"fireevent",level:4},{value:"Coverage testing",id:"coverage-testing",level:3},{value:"Further reading",id:"further-reading",level:3}];function l(e){const t={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Vitest"})," (",(0,i.jsx)(t.a,{href:"https://vitest.dev/",children:"https://vitest.dev/"}),") is a testing framework that can be used easily with vite projects. Vitest provides a Jest like API that is good replacement in the most cases. Vitest also includes the common features required when setting up unit tests (mocking, snapshots, coverage)"]}),"\n",(0,i.jsxs)(t.p,{children:["Install Vitest using the following npm command. The ",(0,i.jsx)(t.code,{children:"-D"})," flag is used to install development dependencies. The package is saved in the ",(0,i.jsx)(t.code,{children:"devDependencies"})," section of the ",(0,i.jsx)(t.code,{children:"package.json"})," file:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm install -D vitest\n"})}),"\n",(0,i.jsx)(t.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(t.p,{children:["Configuration of Vitest is unified with Vite and it is made in the ",(0,i.jsx)(t.strong,{children:"vite.config.ts"})," file's ",(0,i.jsx)(t.code,{children:"test"})," property. The ",(0,i.jsx)(t.code,{children:"defineConfig"})," is now imported from ",(0,i.jsx)(t.code,{children:"vitest/config"}),". It's similar to Vite's ",(0,i.jsx)(t.code,{children:"defineConfig"})," but specifically for Vitest and it contains ",(0,i.jsx)(t.code,{children:"test"})," property:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="vite.config.ts"',children:'// highlight-next-line\nimport { defineConfig } from "vitest/config";\nimport react from "@vitejs/plugin-react";\n\nexport default defineConfig({\n  plugins: [react()],\n  // highlight-start\n  test: {\n    // vitest configuration\n  },\n  // highlight-end\n});\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"test"})," is configuration section where you can specify Vitest-specific settings like: test environment, setup files, global test settings."]}),"\n",(0,i.jsx)(t.h3,{id:"running-tests",children:"Running tests"}),"\n",(0,i.jsxs)(t.p,{children:["You can run vitest in the project where it is installed using the npx. Or we can add the follwing npm scripts in the ",(0,i.jsx)(t.code,{children:"package.json"})," file:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "scripts": {\n    ...\n    "test": "vitest",\n    "coverage": "vitest run --coverage"\n  }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Now, you can run tests using the following npm command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test\n"})}),"\n",(0,i.jsx)(t.p,{children:"There is also Vitest VSCode extension available that can be used to run test cases."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Vitest plugin",src:n(9656).A+"",width:"983",height:"272"})}),"\n",(0,i.jsx)(t.h3,{id:"testing-react-components",children:"Testing React components"}),"\n",(0,i.jsx)(t.p,{children:"When testing React components, we need other testing libraries"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"React Testing Library"})," helps you to test React components (",(0,i.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/intro",children:"https://testing-library.com/docs/react-testing-library/intro"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"jest-dom"})," library provides custom matchers that you can use to extend vitest (See all matchers ",(0,i.jsx)(t.a,{href:"https://github.com/testing-library/jest-dom",children:"https://github.com/testing-library/jest-dom"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"jsdom"})," provides Browser API"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Install the libraries using the following npm command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm install -D jsdom @testing-library/react @testing-library/jest-dom\n"})}),"\n",(0,i.jsx)(t.p,{children:"We also have to change our vitest configuration."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="vitest.config.ts"',children:'import { defineConfig } from "vitest/config";\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    globals: true,\n    environment: "jsdom",\n  },\n});\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"globals"})," - Enables Jest globals API (",(0,i.jsx)(t.a,{href:"https://jestjs.io/docs/api",children:"https://jestjs.io/docs/api"}),")."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"environment"})," - Defines the environment that will be used for testing (Node.js is default). We will use browser based environment ",(0,i.jsx)(t.strong,{children:"jsdom"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"creating-tests",children:"Creating tests"}),"\n",(0,i.jsx)(t.p,{children:'Now, we will create our first test case using the todo list app that we have developed. Our test cases renders the App component and check that there is "My Todos" text.'}),"\n",(0,i.jsxs)(t.p,{children:["Create a new file called ",(0,i.jsx)(t.code,{children:"App.test.tsx"})," in the ",(0,i.jsx)(t.code,{children:"src"})," folder and add the first test case."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="App.test.tsx"',children:'import App from "./App";\nimport { test } from "vitest";\n\ntest("renders header", () => {});\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Import the ",(0,i.jsx)(t.code,{children:"render"})," method from the React testing library. The ",(0,i.jsx)(t.code,{children:"render"})," method can be used to render React component for testing."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="App.test.tsx"',children:'import App from "./App";\nimport { test } from "vitest";\n// highlight-next-line\nimport { render } from "@testing-library/react";\n\ntest("renders App component", () => {\n  // renders the App component for testing\n  // highlight-next-line\n  render(<App />);\n});\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Next, import the ",(0,i.jsx)(t.code,{children:"screen"})," method from the React Testing Library. The ",(0,i.jsx)(t.code,{children:"screen"})," method returns an object that provides queries (i.e. ",(0,i.jsx)(t.code,{children:"getByText"}),", ",(0,i.jsx)(t.code,{children:"getByLabelText"})," etc.) that are bound to the whole rendered ",(0,i.jsx)(t.code,{children:"document.body"}),". These queries can be used to find elements from the HTML document."]}),"\n",(0,i.jsxs)(t.p,{children:["In the following example, we use ",(0,i.jsx)(t.code,{children:"getByText()"})," query to find an element with specified text. The forward slash (/) in ",(0,i.jsx)(t.strong,{children:"/My Todolist/i"})," to define a regular expression pattern, and the ",(0,i.jsx)(t.code,{children:"i"}),"-flag at the end stands for case-insensitive. This means it is looking for rendered content that contains the \u201cHello World\u201d text in a case-insensitive matter. You can also use a full string match that is case-sensitive by passing a string as an argument to ",(0,i.jsx)(t.code,{children:"getByText()"})," query."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="App.test.tsx"',children:'import App from "./App";\nimport { test } from "vitest";\nimport { render, screen } from "@testing-library/react";\n\ntest("renders App component", () => {\n  render(<App />);\n  // highlight-next-line\n  const header = screen.getByText(/My Todos/i);\n});\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Then, we check if the header text exists in DOM using the ",(0,i.jsx)(t.code,{children:"toBeInTheDocument()"})," matcher from the jest-dom library. We have to import ",(0,i.jsx)(t.code,{children:"@testing-library/jest-dom/vitest"})," to extend Vitest mathcers. Then, you can use jest-dom matchers with Vitest."]}),"\n",(0,i.jsxs)(t.p,{children:["The purpose of this test is to ensure that when the ",(0,i.jsx)(t.code,{children:"App"}),' component is rendered, it contains a header with the text "My Todos". If the header is found, the test passes; otherwise, it will fail.']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="App.test.tsx"',children:'import App from "./App";\nimport { test, expect } from "vitest";\nimport { render, screen } from "@testing-library/react";\n  // highlight-next-line\nimport \'@testing-library/jest-dom/vitest\';\n\ntest("renders App component", () => {\n  render(<App />);\n  const header = screen.getByText(/My Todos/i);\n  // highlight-next-line\n  expect(header).toBeInTheDocument();\n});\n'})}),"\n",(0,i.jsx)(t.p,{children:"Now, you can run your first test case."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Test run",src:n(6742).A+"",width:"571",height:"322"})}),"\n",(0,i.jsx)(t.p,{children:"You can change the text in the header and see how failed test case is shown."}),"\n",(0,i.jsxs)(t.p,{children:["Let\u2019s make one example test case for our todo list app that we created in the React Project section. We have stateless ",(0,i.jsx)(t.code,{children:"TodoTable"})," component that we want to create a test case. Test case ensures that a new todo is displayed in the todo table."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoTable.tsx"',children:'import type { TodoTableProps, Todo } from "./types"\n\nexport default function TodoTable(props: TodoTableProps) {\n  return (\n    <div>\n      <table id="todotable">\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Date</th>\n            <th>Priority</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.todos.map((todo: Todo, index: number) => (\n            <tr key={index}>\n              <td>{todo.description}</td>\n              <td>{todo.date}</td>\n              <td>{todo.priority}</td>\n            </tr>\n          ))}\n        </tbody>  \n      </table>    \n    </div>\n  )\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The following code show test case for the stateless ",(0,i.jsx)(t.code,{children:"TodoTable"})," component. It adds one todo item to the table and check that it is displayed. We use ",(0,i.jsx)(t.code,{children:"getByRole()"})," to find the ",(0,i.jsx)(t.code,{children:"table"})," element and ",(0,i.jsx)(t.code,{children:"toHaveTextContent()"})," for assertion."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoTable.test.tsx"',children:"...\nimport TodoTable from './TodoTable';\nimport { test, expect } from \"vitest\";\nimport { render, screen } from \"@testing-library/react\";\nimport '@testing-library/jest-dom/vitest';\nimport type { Todo } from './types';\n\ntest('renders todotable', () => {\n  const row: Todo[] = [\n    {description: 'Go to coffee', date: '24.01.2025', priority: 'low'}\n  ];\n\n  render(<TodoTable todos={row} />);\n  \n  const table = screen.getByRole('table');\n  expect(table).toHaveTextContent(/go to coffee/i);\n});\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can also test for the opposite of a matcher using the ",(0,i.jsx)(t.code,{children:"not"})," keyword."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"const table = screen.getByRole('table');\nexpect(table).not.toHaveTextContent(/go to coffee/i);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If you assert element that is not present, it is recommended to use ",(0,i.jsx)(t.code,{children:"queryBy*"})," methods instead of ",(0,i.jsx)(t.code,{children:"getBy*"}),". The ",(0,i.jsx)(t.code,{children:"getBy*"})," queries throws an error if no element is found."]}),"\n",(0,i.jsx)(t.h4,{id:"fireevent",children:"fireEvent"}),"\n",(0,i.jsxs)(t.p,{children:["React testing library provides ",(0,i.jsx)(t.code,{children:"fireEvent"})," method that you can use for firing DOM events, such as button click. For example, to simulate button click:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'import { render, screen, fireEvent } from "@testing-library/react";\n\n// Find button element\nconst button = screen.getByText("My Button");\n// Fire click event\nfireEvent.click(button);\n'})}),"\n",(0,i.jsx)(t.p,{children:"Let\u2019s create a test where values are added to the description and date input elements and then the Add button is pressed. After that, a new todo item should be added to the table."}),"\n",(0,i.jsxs)(t.p,{children:["The functionality that we want to test is now in the ",(0,i.jsx)(t.code,{children:"TodoList"})," component; therefore, we will add a new test file ",(0,i.jsx)(t.strong,{children:"Todolist.test.tsx"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoList.tsx"',children:"import { useState } from 'react';\nimport type { Todo } from './types';\nimport TodoTable from './TodoTable';\n\nfunction TodoList() {\n  const [todo, setTodo] = useState<Todo>({description: '', date: '', priority: 'low'});\n  const [todos, setTodos] = useState<Todo[]>([]);\n  \n  const addTodo = () => {\n    if (!todo.description || !todo.duedate) {\n      alert('Please fill in all fields');\n      return;\n    }\n\n    setTodos([todo, ...todos]);\n    setTodo({description: '', date: '', priority: 'low'});\n  };\n\n  return(\n    <>\n      <h3>My Todos</h3>  \n      <input \n        placeholder=\"Description\" \n        onChange={event => setTodo({...todo, description: event.target.value})} \n        value={todo.description} \n      />\n      <input \n        placeholder=\"Date\"\n        type=\"date\" \n        onChange={event => setTodo({...todo, date: event.target.value})} \n        value={todo.date} \n      />\n      <select\n        title=\"Priority\"\n        onChange={event => setTodo({...todo, priority: event.target.value as 'low' | 'medium' | 'high'})} \n        value={todo.priority} \n      >\n        <option value=\"low\">Low</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"high\">High</option>\n      </select>\n      <button onClick={addTodo}>Add</button>  \n      <TodoTable todos={todos} /> \n     </>\n  );\n\n}\n\nexport default TodoList;\n"})}),"\n",(0,i.jsxs)(t.p,{children:["First, we will add new test case to the ",(0,i.jsx)(t.strong,{children:"TodoList.test.tsx"})," file and we render the ",(0,i.jsx)(t.code,{children:"TodoList"})," component."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoList.test.tsx"',children:'import TodoList from "./TodoList";\nimport { test } from "vitest";\nimport { render } from "@testing-library/react";\n\ntest("add todo", () => {\n  render(<TodoList />);\n});\n\n'})}),"\n",(0,i.jsxs)(t.p,{children:["To avoid rendering the component multiple times and encountering issues with finding elements, you should ensure that each test case is isolated. You can use the ",(0,i.jsx)(t.code,{children:"cleanup"})," function from ",(0,i.jsx)(t.code,{children:"@testing-library/react"})," to unmount components between tests. The ",(0,i.jsx)(t.code,{children:"afterEach"})," is a function provided by Vitest. It allows you to run a code after each test case. This is useful for cleaning the state between tests to ensure that each test runs in isolation."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoList.test.tsx"',children:'import TodoList from "./TodoList";\nimport { test, afterEach } from "vitest";\nimport { render, cleanup } from "@testing-library/react";\n\nafterEach(() => {\n  cleanup();\n});\n\ntest("add todo", () => {\n  render(<TodoList />);\n});\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Next, we can add value to the input elements by using the ",(0,i.jsx)(t.code,{children:"fireEvent"})," method. Correct input element can be found using ",(0,i.jsx)(t.code,{children:"getByPlaceholderText"})," query that jest-dom provides."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="TodoList.test.tsx"',children:'const desc = screen.getByPlaceholderText("Description");\nfireEvent.change(desc, { target: { value: "Go to coffee" } });\nconst date = screen.getByPlaceholderText("Date");\nfireEvent.change(date, { target: { value: "20.11.2025" } });\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Finally, we can use ",(0,i.jsx)(t.code,{children:"fireEvent"})," to click the Add button. Correct button is found using the ",(0,i.jsx)(t.code,{children:"getByText()"})," query (jest-dom)"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="TodoList.test.tsx"',children:'const button = screen.getByText("Add");\nfireEvent.click(button);\n'})}),"\n",(0,i.jsx)(t.p,{children:"Now, the new todo item should be added to the table and we can use the following statements to assert that."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="TodoList.test.tsx"',children:'expect(screen.getByRole("table")).toHaveTextContent(/go to coffee/i);\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Below is the whole ",(0,i.jsx)(t.code,{children:"TodoList.test.tsx"})," code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoList.test.tsx"',children:'import TodoList from "./TodoList";\nimport { test, afterEach, expect } from "vitest";\nimport { render, screen, cleanup, fireEvent } from "@testing-library/react";\nimport \'@testing-library/jest-dom/vitest\';\n\ntest("add todo", () => {\n  render(<TodoList />);\n\n  const desc = screen.getByPlaceholderText("Description");\n  fireEvent.change(desc, { target: { value: "Go to coffee" } });\n  const date = screen.getByPlaceholderText("Date");\n  fireEvent.change(date, { target: { value: "20.11.2025" } });\n  \n  const button = screen.getByText("Add");\n  fireEvent.click(button);\n\n  expect(screen.getByRole("table")).toHaveTextContent(/go to coffee/i);\n});\n\nafterEach(() => {\n  cleanup();\n});\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"coverage-testing",children:"Coverage testing"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:'"In computer science, code coverage is a percentage measure of the degree to which the source code of a program is executed when a particular test suite is run"'})," - Wikipedia"]}),"\n",(0,i.jsxs)(t.li,{children:["You can run coverage test using the command ",(0,i.jsx)(t.code,{children:"npm run coverage"})]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Coverage test",src:n(5073).A+"",width:"939",height:"219"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"further-reading",children:"Further reading"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://vitest.dev/",children:"https://vitest.dev/"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/intro",children:"https://testing-library.com/docs/react-testing-library/intro"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},9656:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/vitest_plugin-6556912a81c7413a9db6939a411441ba.PNG"}}]);