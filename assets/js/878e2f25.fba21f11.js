"use strict";(self.webpackChunkfrontendcourse=self.webpackChunkfrontendcourse||[]).push([[8622],{1759:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/context-181c4e9226672142de9e007d29d33aba.png"},7027:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"extra/context","title":"Context API","description":"The Context API in React is a way to manage and share state across multiple components without the need to pass props down the component tree. It is useful for handling global or shared state, such as user authentication status, theme, or any data that multiple components need access to.","source":"@site/docs/extra/context.md","sourceDirName":"extra","slug":"/extra/context","permalink":"/frontendprogramming/docs/extra/context","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Context API","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/frontendprogramming/docs/extra/intro"},"next":{"title":"Custom Hooks","permalink":"/frontendprogramming/docs/extra/customHooks"}}');var r=n(4848),s=n(8453);const a={title:"Context API",sidebar_position:2},i=void 0,c={},d=[{value:"Further Reading",id:"further-reading",level:3}];function h(e){const t={a:"a",code:"code",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Context API"})," in React is a way to manage and share state across multiple components without the need to pass props down the component tree. It is useful for handling global or shared state, such as user authentication status, theme, or any data that multiple components need access to."]}),"\n",(0,r.jsxs)(t.p,{children:["Using the props vs Context API:\n",(0,r.jsx)(t.img,{src:n(1759).A+"",width:"898",height:"500"})]}),"\n",(0,r.jsxs)(t.p,{children:["To start using context, you need to create if first. You typically define this in a separate file. The ",(0,r.jsx)(t.code,{children:"createContext"})," is used to create a context that components can provide to read. It takes one argument that is the default value."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="ThemeContext.ts"',children:'import { createContext } from \'react\';\n\ntype Theme = "light" | "dark"\n\nconst ThemeContext = createContext<Theme>("light");\n\nexport default ThemeContext;\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"createContext"})," returns a context object that has ",(0,r.jsx)(t.code,{children:"Provider"})," and ",(0,r.jsx)(t.code,{children:"Consumer"})," properties. The ",(0,r.jsx)(t.code,{children:"Provider"})," property is used to provide context value to components."]}),"\n",(0,r.jsxs)(t.p,{children:["Next, we create ",(0,r.jsx)(t.strong,{children:"context provider"})," that holds the shared value. It can be used to provide value to its child components."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="ThemeProvider.ts"',children:'import React, { useState } from \'react\';\nimport ThemeContext from \'./ThemeContext\';\n\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState("light");\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === "light" ? "dark" : "light"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Now, any component within ",(0,r.jsx)(t.code,{children:"ThemeProvider"})," can access the context usint the React ",(0,r.jsx)(t.code,{children:"useContext"})," hook function."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:"import { useContext } from 'react';\nimport ThemeContext from './ThemeContext';\n\nconst MyComponent = () => {\n  const { theme, toggleTheme } = useContext(ThemeContext);\n\n  return (\n    <>\n      <button onClick={toggleTheme}>Change theme</button>\n      <p>Current theme is: {theme}</p>\n    </>\n  );\n};\n\nexport default MyComponent;\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"further-reading",children:"Further Reading"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://react.dev/learn/passing-data-deeply-with-context",children:"https://react.dev/learn/passing-data-deeply-with-context"})}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(6540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);