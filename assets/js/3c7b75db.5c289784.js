"use strict";(self.webpackChunkfrontendcourse=self.webpackChunkfrontendcourse||[]).push([[1140],{3676:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/todolist_delete-e9aaeacdf3c231c42790153de9440523.png"},4322:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/todolist8-ea7741abb1db0f6c8cbbed8a74f40f63.png"},5903:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/todolist_filter-a3ebaa5875ce84466c0138dc4b56baca.png"},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>s});var n=i(6540);const d={},o=n.createContext(d);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),n.createElement(o.Provider,{value:t},e.children)}},8824:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"3rdpartycomponents/datagrid","title":"DataGrid","description":"MUI has a product called MUI X (https://mui.com/x/) that provides advaced components such as data grid, charts and date picker.","source":"@site/docs/3rdpartycomponents/datagrid.md","sourceDirName":"3rdpartycomponents","slug":"/3rdpartycomponents/datagrid","permalink":"/frontendprogramming/docs/3rdpartycomponents/datagrid","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"DataGrid","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Material UI","permalink":"/frontendprogramming/docs/3rdpartycomponents/mui"},"next":{"title":"Routing","permalink":"/frontendprogramming/docs/3rdpartycomponents/router"}}');var d=i(4848),o=i(8453);const r={title:"DataGrid",sidebar_position:5},s=void 0,a={},c=[{value:"Install DataGrid",id:"install-datagrid",level:4},{value:"Unique id",id:"unique-id",level:3},{value:"Import DataGrid component and define columns",id:"import-datagrid-component-and-define-columns",level:3},{value:"Display DataGrid",id:"display-datagrid",level:3},{value:"Column properties",id:"column-properties",level:3},{value:"Delete functionality",id:"delete-functionality",level:3},{value:"Further reading",id:"further-reading",level:3}];function l(e){const t={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(t.p,{children:["MUI has a product called ",(0,d.jsx)(t.strong,{children:"MUI X"})," (",(0,d.jsx)(t.a,{href:"https://mui.com/x/",children:"https://mui.com/x/"}),") that provides advaced components such as data grid, charts and date picker.\nNow, we will replace the HTML table with the ",(0,d.jsx)(t.code,{children:"DataGrid"})," in our Todolist app. Then, we can easily add useful features such as sorting, filtering, etc. to our todo list app."]}),"\n",(0,d.jsx)(t.h4,{id:"install-datagrid",children:"Install DataGrid"}),"\n",(0,d.jsxs)(t.p,{children:["To start use MUI X ",(0,d.jsx)(t.code,{children:"DataGrid"})," component, you have to install it using the following npm command:"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-bash",children:"npm install @mui/x-data-grid\n"})}),"\n",(0,d.jsx)(t.h3,{id:"unique-id",children:"Unique id"}),"\n",(0,d.jsxs)(t.p,{children:["Material UI's ",(0,d.jsx)(t.code,{children:"DataGrid"})," component requires each row to have a unique identifier. By default, the ",(0,d.jsx)(t.code,{children:"DataGrid"})," looks for a property named ",(0,d.jsx)(t.code,{children:"id"})," in the data set to get that identifier. Our current todo items lack this unique identifier. If the row's identifier is not called ",(0,d.jsx)(t.code,{children:"id"}),", then you need to use the ",(0,d.jsx)(t.code,{children:"getRowId"})," prop to tell the ",(0,d.jsx)(t.code,{children:"DataGrid"})," what field to uses."]}),"\n",(0,d.jsxs)(t.p,{children:["Typically, data fetched from a REST API includes unique identifiers. In our case, we don't have a unique identifier in todo items. Let's update our app to include unique ids for our todo items using the ",(0,d.jsx)(t.code,{children:"uuid"})," library (",(0,d.jsx)(t.a,{href:"https://github.com/uuidjs/uuid",children:"https://github.com/uuidjs/uuid"}),"), which can be used to generate unique ids."]}),"\n",(0,d.jsx)(t.p,{children:"Install the uuid library:"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-bash",children:"npm install uuid\n"})}),"\n",(0,d.jsx)(t.p,{children:"The following example show how to genrate an id using the uuid library:"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",children:"import { v4 as uuidv4 } from 'uuid';\nuuidv4(); // '9b1def4d-2b7d-1bad-9bdd-2b0dwa3dcb6f'\n"})}),"\n",(0,d.jsxs)(t.p,{children:["Open the ",(0,d.jsx)(t.code,{children:"types.ts"})," file and add ",(0,d.jsx)(t.code,{children:"\xecd"})," property to the ",(0,d.jsx)(t.code,{children:"Todo"})," type:"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",children:"export type Todo = {\n  //highlight-next-line\n  id: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high';\n  date: string;\n}\n"})}),"\n",(0,d.jsxs)(t.p,{children:["Import ",(0,d.jsx)(t.code,{children:"uuid"})," to the ",(0,d.jsx)(t.code,{children:"TodoList"})," component and generate unique id when new todo is added:"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoList.tsx"',children:"import { useState } from 'react';\nimport type { Todo } from './types';\nimport TodoTable from './TodoTable';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Stack from \"@mui/material/Stack\";\n//highlight-next-line\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction TodoList() {\n  const [todo, setTodo] = useState<Todo>({id: '', description: '', priority: 'low', date: ''});\n  const [todos, setTodos] = useState<Todo[]>([]);\n  \n  const addTodo = () => {\n    if (!todo.description || !todo.date) {\n      alert(\"Enter values first!\");\n    } \n    else {\n      //highlight-next-line\n      setTodos([...todos, { ...todo, id: uuidv4()}]);\n      setTodo({id: '', description: '', priority: 'low', date: '',});\n    }\n  };\n\n  // continue...\n"})}),"\n",(0,d.jsx)(t.p,{children:"Now, when you add a new todo, it contains a unique id field."}),"\n",(0,d.jsx)(t.h3,{id:"import-datagrid-component-and-define-columns",children:"Import DataGrid component and define columns"}),"\n",(0,d.jsxs)(t.p,{children:["Import ",(0,d.jsx)(t.code,{children:"Datagrid"})," to your ",(0,d.jsx)(t.code,{children:"TodoTable"})," component:"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoTable.tsx"',children:"import { DataGrid } from '@mui/x-data-grid';\n"})}),"\n",(0,d.jsxs)(t.p,{children:["Columns are defined using objects and the type of objects is ",(0,d.jsx)(t.code,{children:"GridColDef"}),", that is interface provided by ",(0,d.jsx)(t.code,{children:"DataGrid"})," (",(0,d.jsx)(t.a,{href:"https://mui.com/x/api/data-grid/",children:"https://mui.com/x/api/data-grid/"}),"). The required ",(0,d.jsx)(t.code,{children:"field"})," property is used to define where the field get its value. For example, the column with field ",(0,d.jsx)(t.code,{children:"description"})," will display the value stored in ",(0,d.jsx)(t.code,{children:"todo.description"}),"."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",children:"// Import GirdColDef type\nimport type { GridColDef } from '@mui/x-data-grid';\n\n// Define columns\nconst columns: GridColDef[] = [\n  { field: 'description' },\n  { field: 'priority' },\n  { field: 'date' },\n]\n"})}),"\n",(0,d.jsx)(t.h3,{id:"display-datagrid",children:"Display DataGrid"}),"\n",(0,d.jsxs)(t.p,{children:["Then, we display the ",(0,d.jsx)(t.code,{children:"DataGrid"})," component. The ",(0,d.jsx)(t.code,{children:"rows"})," prop defines where row data comes from and the value should be an array. In our case, it is the ",(0,d.jsx)(t.code,{children:"todos"})," array state that is passed to the ",(0,d.jsx)(t.code,{children:"TodoTable"})," component using ",(0,d.jsx)(t.code,{children:"props"}),". The ",(0,d.jsx)(t.code,{children:"columns"})," prop defines the column definition, and it is the ",(0,d.jsx)(t.code,{children:"columns"})," that we just created before. You have to wrap the ",(0,d.jsx)(t.code,{children:"DataGrid"})," component inside ",(0,d.jsx)(t.code,{children:"div"})," that defines the grid size. You can also use flex container with ",(0,d.jsx)(t.code,{children:"flex-direction: 'column'"}),"."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-tsx",metastring:'title="TodoTable.tsx"',children:"return(\n  <div style={{ height: 500, width: '60%', margin: 'auto' }}>\n    <DataGrid rows={props.todos} columns={columns} />\n  </div>\n)\n"})}),"\n",(0,d.jsx)(t.h3,{id:"column-properties",children:"Column properties"}),"\n",(0,d.jsxs)(t.p,{children:["The column properties are used to define the column behavior. So far, we have only used the ",(0,d.jsx)(t.code,{children:"field"})," property in our column definitions. You can find all column properties at ",(0,d.jsx)(t.a,{href:"https://mui.com/x/react-data-grid/column-definition/",children:"https://mui.com/x/react-data-grid/column-definition/"}),". By default, column sort is enabled. Set ",(0,d.jsx)(t.code,{children:"sortable"})," property to ",(0,d.jsx)(t.code,{children:"false"})," to disable sorting on a column."]}),"\n",(0,d.jsxs)(t.p,{children:["If you type a todo with a long description, you can see that it doesn't fit to the column. The default width of column is 100px and you can change it using the ",(0,d.jsx)(t.code,{children:"width"})," property:"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",children:"// Set column width\nconst columns: GridColDef[] = [\n  { field: 'description', width: 300 },\n  { field: 'priority' },\n  { field: 'date', width: 150 },\n]\n"})}),"\n",(0,d.jsx)(t.p,{children:"Now, the todo list app look the following:"}),"\n",(0,d.jsx)(t.p,{children:(0,d.jsx)(t.img,{alt:"Todolist",src:i(4322).A+"",width:"1339",height:"444"})}),"\n",(0,d.jsx)(t.p,{children:"Each column headers also contain a menu that opens the column filter and other functionalities."}),"\n",(0,d.jsx)(t.p,{children:(0,d.jsx)(t.img,{alt:"Todolist",src:i(5903).A+"",width:"982",height:"219"})}),"\n",(0,d.jsxs)(t.p,{children:["The column header text can be defined using the ",(0,d.jsx)(t.code,{children:"headerName"})," property. By default, the header title is derived from the ",(0,d.jsx)(t.code,{children:"field"})," property:"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",children:"// Set column width\nconst columns: GridColDef[] = [\n  { field: 'description', headerName: 'Description', width: 300 },\n  { field: 'priority', headerName: 'Priority', },\n  { field: 'date', headerName: 'Due date', width: 150 },\n]\n"})}),"\n",(0,d.jsx)(t.p,{children:"Next, we will implement delete funtionality."}),"\n",(0,d.jsx)(t.h3,{id:"delete-functionality",children:"Delete functionality"}),"\n",(0,d.jsxs)(t.p,{children:["In this phase, we will use Material Icons. If you haven't installed them yet, you can do so by following the instructions here: ",(0,d.jsx)(t.a,{href:"http://mui.com/material-ui/getting-started/installation/#icons",children:"http://mui.com/material-ui/getting-started/installation/#icons"})]}),"\n",(0,d.jsxs)(t.p,{children:["Previously, we implemented the delete functionality by using the row index. Now, we have a unique ",(0,d.jsx)(t.code,{children:"id"})," property that we can use to delete todo items. The type of the ",(0,d.jsx)(t.code,{children:"id"})," is ",(0,d.jsx)(t.code,{children:"string"}),", so we have to do some changes to our types and ",(0,d.jsx)(t.code,{children:"deleteTodo"})," function."]}),"\n",(0,d.jsxs)(t.p,{children:["Update the ",(0,d.jsx)(t.code,{children:"handleDelete"})," function to accept an ",(0,d.jsx)(t.code,{children:"id"})," parameter of type ",(0,d.jsx)(t.code,{children:"string"}),"."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:'title="types.ts"',children:"export type TodoTableProps = {\n  todos: Todo[];\n  handleDelete: (id: string) => void;\n}\n"})}),"\n",(0,d.jsxs)(t.p,{children:["Update the ",(0,d.jsx)(t.code,{children:"deleteTodo"})," function to accept an ",(0,d.jsx)(t.code,{children:"id"})," parameter of type ",(0,d.jsx)(t.code,{children:"string"})," and use the ",(0,d.jsx)(t.code,{children:"todo.id"})," property in the ",(0,d.jsx)(t.code,{children:"filter"})," method."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:'title="TodoList.tsx"',children:"const deleteTodo = (id: string) => {\n  setTodos(todos.filter(todo => id !== todo.id));\n};\n"})}),"\n",(0,d.jsxs)(t.p,{children:["By default, columns are assumend to show strings in ",(0,d.jsx)(t.code,{children:"DataGrid"}),". You can define column type to be ",(0,d.jsx)(t.code,{children:"action"}),". The ",(0,d.jsx)(t.code,{children:"action"})," column type is used to define a column that contains action buttons or icons."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:'title="TodoTable.tsx"',children:"const columns: GridColDef[] = [\n  { field: 'description', headerName: 'Description', width: 300 },\n  { field: 'priority', headerName: 'Priority', },\n  { field: 'date', headerName: 'Due date', width: 150 },\n  {\n    field: 'actions',\n    type: 'actions',\n    // action buttons\n  },\n]\n"})}),"\n",(0,d.jsxs)(t.p,{children:["If the column type is ",(0,d.jsx)(t.code,{children:"actions"}),", you need to provide a ",(0,d.jsx)(t.code,{children:"getActions"})," function that returns an array of actions available for each row (",(0,d.jsx)(t.code,{children:"React.ReactElement<GridActionsCellItemProps>[]"}),").  The type of the ",(0,d.jsx)(t.code,{children:"params"})," that is passed to ",(0,d.jsx)(t.code,{children:"getActions"})," funcion is ",(0,d.jsx)(t.code,{children:"GridRowParams"}),". Import ",(0,d.jsx)(t.code,{children:"GridRowParams"})," from ",(0,d.jsx)(t.code,{children:"@mui/x-data-grid"}),"."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:'title="TodoTable.tsx"',children:"const columns: GridColDef[] = [\n  { field: 'description', headerName: 'Description', width: 300 },\n  { field: 'priority', headerName: 'Priority', },\n  { field: 'date', headerName: 'Due date', width: 150 },\n  {\n    field: 'actions',\n    type: 'actions',\n    //highlight-start\n    getActions: (params: GridRowParams) => [\n      // actions\n    ]\n    //highlight-end\n  },\n]\n"})}),"\n",(0,d.jsxs)(t.p,{children:["The ",(0,d.jsx)(t.code,{children:"params"})," that is passed to ",(0,d.jsx)(t.code,{children:"getActions"})," function contains ",(0,d.jsx)(t.code,{children:"row"})," property that is the row model of the row that the current cell belongs to. You can use that to access row values (",(0,d.jsx)(t.a,{href:"https://mui.com/x/api/data-grid/grid-row-params/",children:"https://mui.com/x/api/data-grid/grid-row-params/"}),")."]}),"\n",(0,d.jsxs)(t.p,{children:["Next, we will implement the actions. Import the delete icon from ",(0,d.jsx)(t.code,{children:"mui/x-data-grid"}),"."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",children:"import DeleteIcon from '@mui/icons-material/Delete';\n"})}),"\n",(0,d.jsxs)(t.p,{children:["You can explore the icons available in the Material Icons library here: ",(0,d.jsx)(t.a,{href:"https://mui.com/material-ui/material-icons/",children:"https://mui.com/material-ui/material-icons/"}),"."]}),"\n",(0,d.jsxs)(t.p,{children:["Next, import and display ",(0,d.jsx)(t.code,{children:"GridActionsCellItem"})," to implement actions. The ",(0,d.jsx)(t.code,{children:"icon"})," prop specifies the icon to display, and the ",(0,d.jsx)(t.code,{children:"onClick"})," event handler defines the function to execute when the action is clicked. In our case, we call ",(0,d.jsx)(t.code,{children:"handleDelete"})," function and pass todo ",(0,d.jsx)(t.code,{children:"id"})," as an argument."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:'title="TodoTable.tsx"',children:"const columns: GridColDef[] = [\n  { field: 'description', headerName: 'Description', width: 300 },\n  { field: 'priority', headerName: 'Priority', },\n  { field: 'date', headerName: 'Due date', width: 150 },\n  {\n    field: 'actions',\n    type: 'actions',\n    getActions: (params: GridRowParams) => [\n      //highlight-start\n      <GridActionsCellItem \n        icon={<DeleteIcon />} \n        onClick={() => props.handleDelete(params.row.id)} \n        label=\"Delete\" />,\n        //highlight-end\n    ]\n  },\n]\n"})}),"\n",(0,d.jsx)(t.p,{children:"Now, you can see delete icon in each row and when you click it, the row is deleted:"}),"\n",(0,d.jsx)(t.p,{children:(0,d.jsx)(t.img,{alt:"Todolist",src:i(3676).A+"",width:"1135",height:"400"})}),"\n",(0,d.jsxs)(t.p,{children:["You can read more about ",(0,d.jsx)(t.code,{children:"DataGrid"})," column types in ",(0,d.jsx)(t.a,{href:"https://mui.com/x/react-data-grid/column-definition/#column-types",children:"https://mui.com/x/react-data-grid/column-definition/#column-types"}),"."]}),"\n",(0,d.jsx)(t.hr,{}),"\n",(0,d.jsx)(t.h3,{id:"further-reading",children:"Further reading"}),"\n",(0,d.jsxs)(t.ul,{children:["\n",(0,d.jsx)(t.li,{children:(0,d.jsx)(t.a,{href:"https://mui.com/x/react-data-grid/",children:"https://mui.com/x/react-data-grid/"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}}}]);