"use strict";(self.webpackChunkfrontendcourse=self.webpackChunkfrontendcourse||[]).push([[8140],{7742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var o=n(5893),s=n(1151);const r={title:"Context API",sidebar_position:2},a=void 0,i={id:"extra/context",title:"Context API",description:"- The Context API in React is a way to manage and share state across multiple components without the need to pass props down the component tree. It is useful for handling global or shared state, such as user authentication status, theme, or any data that multiple components need access to.",source:"@site/docs/extra/context.md",sourceDirName:"extra",slug:"/extra/context",permalink:"/frontendprogramming/docs/extra/context",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/extra/context.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Context API",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/frontendprogramming/docs/extra/intro"},next:{title:"React Query",permalink:"/frontendprogramming/docs/extra/reactquery"}},c={},d=[];function h(e){const t={code:"code",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.strong,{children:"Context API"})," in React is a way to manage and share state across multiple components without the need to pass props down the component tree. It is useful for handling global or shared state, such as user authentication status, theme, or any data that multiple components need access to."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Using the props vs Context API:\n",(0,o.jsx)(t.img,{src:n(7758).Z+"",width:"898",height:"500"})]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"To start using context, you need to create if first. You typically define this in a separate file."}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="ThemeContext.js"',children:"import { createContext } from 'react';\n\nconst ThemeContext = createContext();\n\nexport default ThemeContext;\n"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Next, you have to create ",(0,o.jsx)(t.strong,{children:"context provider"})," that holds the shared state provide it to its child components."]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="ThemeProvider.js"',children:"import React, { useState } from 'react';\nimport ThemeContext from './ThemeContext';\n\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Now, any component within theme provider can access the context usint the React ",(0,o.jsx)(t.code,{children:"useContext"})," hook function."]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import { useContext } from 'react';\nimport ThemeContext from './ThemeContext';\n\nconst MyComponent = () => {\n  const { theme, toggleTheme } = useContext(ThemeContext);\n\n  return (\n    <>\n      <button onClick={toggleTheme}>Change theme</button>\n      <p>Current theme is: {theme}</p>\n    </>\n  );\n};\n\nexport default MyComponent;\n"})})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},7758:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/context-181c4e9226672142de9e007d29d33aba.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var o=n(7294);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);