"use strict";(self.webpackChunkfrontendcourse=self.webpackChunkfrontendcourse||[]).push([[5882],{8533:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=r(5893),s=r(1151);const i={title:"React Query",sidebar_position:3},c=void 0,a={id:"extra/reactquery",title:"React Query",description:"Data Fetching Libraries",source:"@site/docs/extra/reactquery.md",sourceDirName:"extra",slug:"/extra/reactquery",permalink:"/frontendprogramming/docs/extra/reactquery",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"React Query",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Context API",permalink:"/frontendprogramming/docs/extra/context"},next:{title:"TypeScript",permalink:"/frontendprogramming/docs/extra/typescript"}},o={},l=[{value:"Data Fetching Libraries",id:"data-fetching-libraries",level:3},{value:"React Query (Tanstack Query)",id:"react-query-tanstack-query",level:3},{value:"GET request",id:"get-request",level:4},{value:"POST, DELETE &amp; UPDATE",id:"post-delete--update",level:4},{value:"Further reading",id:"further-reading",level:3}];function u(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"data-fetching-libraries",children:"Data Fetching Libraries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Using hte ",(0,t.jsx)(n.code,{children:"useState"})," and ",(0,t.jsx)(n.code,{children:"useEffect"})," hooks is good way to learn basics of data fetching in React components."]}),"\n",(0,t.jsxs)(n.li,{children:["There are good React libraries available for data fetching, for example:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"React Query"})," (Tanstack Query) (",(0,t.jsx)(n.a,{href:"https://tanstack.com/query/latest",children:"https://tanstack.com/query/latest"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SWR"})," (",(0,t.jsx)(n.a,{href:"https://swr.vercel.app/",children:"https://swr.vercel.app/"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"These libraries provides nice features like caching, error handling, detect out-of-date data etc. and it is recommended to use these when developing proper React apps."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"react-query-tanstack-query",children:"React Query (Tanstack Query)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"To install React Query , execute the following npm command in your project using the command line."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @tanstack/react-query\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["First, you have to create a client instance and provide it to your app using the ",(0,t.jsx)(n.code,{children:"QueryClientProvider"})," component. Query client is responsible for data caching and you can use it to configure global settings for React Query."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { QueryClient QueryClientProvider } from '@tanstack/react-query'\n\n// Create a client\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    // Provide the client to your App\n    <QueryClientProvider client={queryClient}>\n      <YourApp />\n    </QueryClientProvider>\n  )\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"get-request",children:"GET request"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You can use ",(0,t.jsx)(n.code,{children:"useQuery"})," hook function to send GET request"]}),"\n",(0,t.jsx)(n.li,{children:"The syntax is the following"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"useQuery({ queryKey: ['your_query_key'], queryFn: fetchSomething })\n"})}),"\n",(0,t.jsx)(n.p,{children:"where"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"queryKey"})," is the unique key for the query"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"queryFn"})," is the function that invokes the query. The function must return a promise."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { useQuery } from '@tanstack/react-query'\n\nfunction YourComponent() {\n  const result = useQuery({\n    queryKey: ['cars'], \n    queryFn: () =>  \n      fetch('https://cars.com/cars').then(res => res.json())\n  })\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The query result is an object that contains the following boolean properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"isLoading, isSuccess, isError"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["If the request succeed, you can access the data using the ",(0,t.jsx)(n.code,{children:"data"})," property (state is not needed to store response data)."]}),"\n",(0,t.jsxs)(n.li,{children:["The request is done when the component is rendered first time, therefore you don't need ",(0,t.jsx)(n.code,{children:"useEffect"})," hook."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { useQuery } from '@tanstack/react-query'\n\nfunction YourComponent() {\n  const {isLoading, isSuccess, data} = useQuery({\n    queryKey: ['cars'], \n    queryFn: () => fecthCars\n  })\n\n  if (isLoading) {\n    return <span>Loading...</span>\n  }\n\n  return (\n    <ul>\n      {data.map((car) => (\n        <li key={car.id}>{car.brand}</li>\n      ))}\n    </ul>\n  )\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"It is also a good practice to split your REST call functions to own module"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// services.js\nexport async function fetchCars() {\n  const response = await fetch(API_URL);\n  return await response.json();\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Then, you can import these in your components"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { useQuery } from '@tanstack/react-query';\nimport { fetchCars } from './services.js`;\n\nfunction YourComponent() {\n  const { isLoading, isSuccess, data } = useQuery({\n    queryKey: ['cars'], \n    queryFn: () => fecthCars\n  })\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"React query refetch data automatically when:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The window is refocused"}),"\n",(0,t.jsx)(n.li,{children:"The network is reconnected"}),"\n",(0,t.jsx)(n.li,{children:"New instance of query is mounted"}),"\n",(0,t.jsx)(n.li,{children:"You have configured optional refetch interval"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["By default, React Query considers data to be stale (out of date) immediately after a successful query, which means that it will automatically trigger a background refetch the next time the data is accessed. However, you can customize this behavior by setting a specific stale time for your queries using the ",(0,t.jsx)(n.code,{children:"staleTime"})," option."]}),"\n",(0,t.jsx)(n.h4,{id:"post-delete--update",children:"POST, DELETE & UPDATE"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You can use ",(0,t.jsx)(n.code,{children:"useMutation"})," hook to update date"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { useMutation } from '@tanstack/react-query';\n\nconst { mutate } = useMutation(deleteCar, {\n    onSuccess: () => {\n      // Car deleted\n    },\n    onError: () => {\n      // Error in deletion\n    },\n  });\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Then you can call ",(0,t.jsx)(n.code,{children:"mutate"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"<button onClick={() => mutate(carid)}>Delete<button>\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"useQueryClient"})," hook can be used to handle cache. Query client provides ",(0,t.jsx)(n.code,{children:"invalidateQueries"})," function that can be used to invalidate queries and force to refetch data."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'  const queryClient = useQueryClient();\n\n  const { mutate } = useMutation(deleteCar, {\n    onSuccess: () => {\n      // Clears the cache and refetch data\n      queryClient.invalidateQueries(["cars"]);\n    },\n    onError: () => {\n      alert("There was an error");\n    },\n  });\n\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Now, the ",(0,t.jsx)(n.code,{children:"cars"})," query is refetched after the successful mutation."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"further-reading",children:"Further reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://tanstack.com/query/latest/docs/react/overview",children:"https://tanstack.com/query/latest/docs/react/overview"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>c});var t=r(7294);const s={},i=t.createContext(s);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);