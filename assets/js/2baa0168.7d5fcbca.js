"use strict";(self.webpackChunkfrontendcourse=self.webpackChunkfrontendcourse||[]).push([[5862],{5020:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/type_example-8ac59b25e652445b8bbab510372fa5a4.png"},5071:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"general/typescript","title":"TypeScript","description":"TypeScript - Basics","source":"@site/docs/general/typescript.md","sourceDirName":"general","slug":"/general/typescript","permalink":"/frontendprogramming/docs/general/typescript","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"TypeScript","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Modern JavaScript","permalink":"/frontendprogramming/docs/general/es6"},"next":{"title":"Github Classroom","permalink":"/frontendprogramming/docs/general/github"}}');var t=s(4848),i=s(8453);const a={title:"TypeScript",sidebar_position:4},l=void 0,c={},o=[{value:"TypeScript - Basics",id:"typescript---basics",level:3},{value:"Type inference",id:"type-inference",level:4},{value:"Functions",id:"functions",level:4},{value:"Arrays",id:"arrays",level:4},{value:"Union types",id:"union-types",level:4},{value:"Structural types",id:"structural-types",level:4},{value:"Further reading",id:"further-reading",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"typescript---basics",children:"TypeScript - Basics"}),"\n",(0,t.jsxs)(n.p,{children:["In this course, we are using TypeScript. If you are not familiar with TypeScript, this chapter gives brief introduction to TypeScript. You can also read Microsoft tutroial ",(0,t.jsx)(n.strong,{children:"TypeScript for JavaScript Programmers"}),": ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html",children:"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html"})]}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript is strongly typed programming language (",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"https://www.typescriptlang.org/"}),") that is based on JavaScript."]}),"\n",(0,t.jsx)(n.p,{children:"Benefits of using TypeScript:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Catch errors before pushing your code to production."}),"\n",(0,t.jsx)(n.li,{children:"Code is easier to understand and refactor/maintain."}),"\n",(0,t.jsx)(n.li,{children:"Provides more information to developer (Self documented)"}),"\n",(0,t.jsx)(n.li,{children:"More popular nowadays (Great skill)"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can try TypeScript in your browser: ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/play",children:"https://www.typescriptlang.org/play"})]}),"\n",(0,t.jsx)(n.p,{children:"You can install TypeScript into your project using the npm:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install typescript --save-dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then you can run TypeScript compiler using the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx tsc\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also install TypeScript globally and then ",(0,t.jsx)(n.code,{children:"tsc"})," command is available in all locations in your terminal."]}),"\n",(0,t.jsxs)(n.p,{children:["VSCode provides useful features for TS development. Read more here: ",(0,t.jsx)(n.a,{href:"https://code.visualstudio.com/docs/languages/typescript",children:"https://code.visualstudio.com/docs/languages/typescript"})]}),"\n",(0,t.jsx)(n.h4,{id:"type-inference",children:"Type inference"}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript will automatically define the type when you initialize a variable. In the following example, we declare variable ",(0,t.jsx)(n.code,{children:"helloworld"})," and assign it to a string value. If we try to re-assign it with other type, we get an error."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(5020).A+"",width:"1014",height:"201"})}),"\n",(0,t.jsxs)(n.p,{children:["The most common primitive types are: ",(0,t.jsx)(n.code,{children:"string"}),", ",(0,t.jsx)(n.code,{children:"number"})," and ",(0,t.jsx)(n.code,{children:"boolean"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["See the different types: ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html",children:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html"})]}),"\n",(0,t.jsx)(n.p,{children:"You can set explicit type to a variable:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let name: string\nlet age: number\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can check the type using the ",(0,t.jsx)(n.code,{children:"typeof"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'typeof name === "string" // true\ntypeof age === "number" // true\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the type is not known when you write code, you can use ",(0,t.jsx)(n.code,{children:"unknown"})," type."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'let a: unknown = 10\na = "It should be string"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you want to exlude type checking, you can use ",(0,t.jsx)(n.code,{children:"any"})," type."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let a: any = 10\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"unknown"})," type is a safer alternative to ",(0,t.jsx)(n.code,{children:"any"}),". It represents any value, but you cannot perform operations on it without first asserting its type. The code below demonstrates the difference between ",(0,t.jsx)(n.code,{children:"any"})," and ",(0,t.jsx)(n.code,{children:"unknown"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"unknown"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'let value: unknown\n\nvalue = 42 // This is OK\nvalue = "hello" // This is OK\nvalue = true // This is OK\n\n// Type checking is required before using the value\nif (typeof value === "number") {\n  let num: number = value\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"any"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'let value: any\n\nvalue = 42 // This is OK\nvalue = "hello" // This is OK\nvalue = true // This is OK\n\n// Type checking is not required\n// This is OK, but potentially unsafe\nlet num: number = value\n'})}),"\n",(0,t.jsx)(n.h4,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.p,{children:"You can define the type of parameters and return value"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function calc(x: number, y: number): number {\n  return x * y\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In JavaScript function parameters are optional by default. In TypeScript, you will get an error if you don't pass all function parameters. To make function parameter optional, you can use ",(0,t.jsx)(n.code,{children:"?"})," after the parameter name."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function sayHello(name: string, age?: number): string {\n  if (!age) return `Hello ${name}`\n\n  return `Hello ${name}, you are ${age} year(s) old`\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now, you can call function in the following ways:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'sayHello("John")\n// or\nsayHello("John", 20)\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If there is no return value, you can use the ",(0,t.jsx)(n.code,{children:"void"})," keyword:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function logMessage(message: string): void {\n  console.log(message)\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"arrays",children:"Arrays"}),"\n",(0,t.jsx)(n.p,{children:"Arrays are declared with the following syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const arr: type[]\n"})}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'let names: string[]\nnames = ["John", "Lisa", "Mike"]\n\n// You can also use Array() constructor\nlet nums: number[] = new Array(10)\nnums[0] = 4\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can also use generic array type ",(0,t.jsx)(n.code,{children:"Array<typeOfElement>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let names: Array<string> = ['Lisa', 'Mike', 'Greg'];\n"})}),"\n",(0,t.jsx)(n.h4,{id:"union-types",children:"Union types"}),"\n",(0,t.jsx)(n.p,{children:"You can combine more complex types using union types:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'type MyStates = "awake" | "sleep" | "eating"\n\ntype AppStatus = "success" | "error" | "loading";\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"|"}),' operator defines a union of string values. It allows only three possible string values: "awake", "sleep", or "eating". That can be used to ensure that variables only contain these specific values.']}),"\n",(0,t.jsx)(n.h4,{id:"structural-types",children:"Structural types"}),"\n",(0,t.jsxs)(n.p,{children:["Structural type are used a lot with React. For example, typing component props or complex states. To define strutural types, you can use ",(0,t.jsx)(n.code,{children:"interface"})," or ",(0,t.jsx)(n.code,{children:"type"})," keyword."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface Person {\n  name: string;\n  age: number;\n}\n\ntype Point = {\n  x: number;\n  y: number;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["See the difference between types and interfaces: ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces",children:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"If you have nested objects in your entities, for example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type Person = {\n  name: string;\n  age: number;\n  address: {\n    street: string;\n    number: number;\n    zip: number;\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Instead of using nested object, you can create ",(0,t.jsx)(n.code,{children:"Address"})," type"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type Address = {\n  street: string;\n  number: number;\n  zip: number;\n}\n\ntype Person = {\n  name: string;\n  age: number;\n  address: Address;\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"further-reading",children:"Further reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"https://www.typescriptlang.org/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://react-typescript-cheatsheet.netlify.app/",children:"https://react-typescript-cheatsheet.netlify.app/"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);