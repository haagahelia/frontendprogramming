"use strict";(self.webpackChunkfrontendcourse=self.webpackChunkfrontendcourse||[]).push([[6381],{9780:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var r=s(5893),t=s(1151);const i={title:"TypeScript",sidebar_position:4},l=void 0,a={id:"extra/typescript",title:"TypeScript",description:"TypeScript - Basics",source:"@site/docs/extra/typescript.md",sourceDirName:"extra",slug:"/extra/typescript",permalink:"/frontendprogramming/docs/extra/typescript",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"TypeScript",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"React Query",permalink:"/frontendprogramming/docs/extra/reactquery"},next:{title:"Graph QL",permalink:"/frontendprogramming/docs/extra/graphql"}},c={},o=[{value:"TypeScript - Basics",id:"typescript---basics",level:3},{value:"Type inference",id:"type-inference",level:4},{value:"Functions",id:"functions",level:4},{value:"Arrays",id:"arrays",level:4},{value:"Structural types",id:"structural-types",level:4},{value:"React &amp; TypeScript",id:"react--typescript",level:3},{value:"Component props",id:"component-props",level:4},{value:"Function components",id:"function-components",level:4},{value:"useState hook",id:"usestate-hook",level:4},{value:"Forms &amp; Events",id:"forms--events",level:4},{value:"Further reading",id:"further-reading",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"typescript---basics",children:"TypeScript - Basics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["TypeScript is strongly typed programming language (",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"https://www.typescriptlang.org/"}),") that is based on JavaScript."]}),"\n",(0,r.jsxs)(n.li,{children:["Benefits of using TypeScript:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Catch errors before pushing your code to production."}),"\n",(0,r.jsx)(n.li,{children:"Code is easier to understand and refactor/maintain."}),"\n",(0,r.jsx)(n.li,{children:"Provides more information to developer (Self documented)"}),"\n",(0,r.jsx)(n.li,{children:"More popular nowadays (Great skill)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["You can try TypeScript in your browser:  ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/play",children:"https://www.typescriptlang.org/play"})]}),"\n",(0,r.jsx)(n.li,{children:"You can install TypeScript into your project using the npm:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install typescript --save-dev\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Then you can run TypeScript compiler using the following command:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx tsc\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can also install TypeScript globally and then ",(0,r.jsx)(n.code,{children:"tsc"})," command is available in all locations in your terminal."]}),"\n",(0,r.jsxs)(n.li,{children:["VSCode provides nice features for TS development. Read mode here: ",(0,r.jsx)(n.a,{href:"https://code.visualstudio.com/docs/languages/typescript",children:"https://code.visualstudio.com/docs/languages/typescript"})]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"type-inference",children:"Type inference"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["TypeScript will automatically define the type when you initialize a variable. In the following example, we declare variable ",(0,r.jsx)(n.code,{children:"helloworld"})," and assign it to a string value. If we try to re-assign it with other type, we get an error."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:s(9344).Z+"",width:"1014",height:"201"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The most common primitive types are: ",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"number"})," and ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.li,{children:["See the different types: ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html",children:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You can also set explicit type to a variable:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let name: string;\nlet age: number;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can check the type using the ",(0,r.jsx)(n.code,{children:"typeof"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'typeof name === "string" // true\ntypeof age === "number" // true\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the type is not known when you write code, you can use ",(0,r.jsx)(n.code,{children:"unknown"})," type."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let a: unknown = 10;\na = "It should be string";\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you want to exlude type checking, you can use ",(0,r.jsx)(n.code,{children:"any"})," type."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let a: any = 10;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"unknown"})," vs ",(0,r.jsx)(n.code,{children:"any"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"any"})," type allows to assign anything - The ",(0,r.jsx)(n.code,{children:"any"})," type allows to operate anything."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"unknown"})," type allows to assign anything - The ",(0,r.jsx)(n.code,{children:"unknown"})," type doesn't allow to operate anything (Needs type check).\n",(0,r.jsx)(n.img,{src:s(6415).Z+"",width:"360",height:"164"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"functions",children:"Functions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You can define the type of parameters and return value"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function calc(x: number, y: number): number {\n  return x * y;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"In JavaScript function parameters are optional by default."}),"\n",(0,r.jsxs)(n.li,{children:["In TypeScript, you will get an error if you don't pass all function parameters. To make function parameter optional, you can use ",(0,r.jsx)(n.code,{children:"?"})," after the parameter name."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function sayHello(name: string, age?: number): string {\n  if (!age)\n    return `Hello ${name}`;\n  \n  return `Hello ${name}, you are ${age} year(s) old`\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Now, you can call function in the following ways:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'sayHello("John");\n// or\nsayHello("John", 20);\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If there is no return value, you can use the ",(0,r.jsx)(n.code,{children:"void"})," keyword:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"(name: string) => void\n"})}),"\n",(0,r.jsx)(n.h4,{id:"arrays",children:"Arrays"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Arrays are declared with the following syntax:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const arr: type[];\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let names: string[];\nnames = ["John", "Lisa", "Mike"];\n\n// You can also use Array() constructor\nlet nums: number[] = new Array(10);\nnums[0] = 4;\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You can also combibe more complex types"}),"\n",(0,r.jsx)(n.li,{children:"Unions:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type MyStates = "awake" | "sleep" | "eating";\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generics:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type NumArray = Array<number>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"structural-types",children:"Structural types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Structural types (define entities) are used a lot with React. For example, typing component props."}),"\n",(0,r.jsxs)(n.li,{children:["You can use ",(0,r.jsx)(n.code,{children:"interface"})," or ",(0,r.jsx)(n.code,{children:"type"})," keyword."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Person {\n  name: string;\n  age: number;\n}\n\ntype Point = {\n  x: number;\n  y: number;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["See the difference between types and interfaces: ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces",children:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If you have nested objects in your entities, for example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Person {\n  name: string;\n  age: number;\n  address: {\n    street: string;\n    number: number;\n    zip: number;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Instead of using nested object, you can create ",(0,r.jsx)(n.code,{children:"Address"})," interface"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Address {\n  street: string;\n  number: number;\n  zip: number;\n}\n\ninterface Person {\n  name: string;\n  age: number;\n  address: Address;\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"react--typescript",children:"React & TypeScript"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can use TypeScript in your Vite React project by selecting ",(0,r.jsx)(n.strong,{children:"TypeScript"})," variant when creating a Vite project:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm create vite@latest\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"component-props",children:"Component props"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can define the type for the function component ",(0,r.jsx)(n.code,{children:"props"})," (=function arguments)"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"interface HelloProps {\n  name: string;\n  age: number;\n}\n\nfunction Hello({name, age}: HelloProps) {\n  return(\n    <div>\n      Hello {name}, you are {age} years old!\n    </div>\n  )\n}\n\nexport default Hello;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Now, if you pass value that doesn't match to defined type, you will get an error."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:s(9409).Z+"",width:"1306",height:"611"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can define optional props using the ",(0,r.jsx)(n.code,{children:"?"}),", for example:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"interface HelloProps {\n  name: string;\n  age?: number;\n}\n\nfunction Hello({name, age}: HelloProps) {\n  return(\n    <div>\n      Hello {name}\n      { age && <>, you are {age} years old!</>}   \n    </div>\n  )\n}\n\nexport default Hello;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the props value is a function, the definition is following:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface HelloProps {\n  name: string;\n  age?: number;\n  myFunc: () => void; // no parmeters and return value\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface HelloProps {\n  name: string;\n  age?: number;\n  myFunc: (msg: string) => void; // function parmeters\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"function-components",children:"Function components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You can also define the return type for your component and you will get an error if something else is returned."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"interface HelloProps {\n  name: string;\n  age: number;\n}\n\nfunction Hello({name, age}: HelloProps): JSX.Element {\n  return(\n    <div>\n      Hello {name}, you are {age} years old!\n    </div>\n  )\n}\n\nexport default Hello;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"usestate-hook",children:"useState hook"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type interference works with useState hooks function. For example, if you declare following state:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const [isReady, setReady] = useState(false);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Now, if you update the state using wrong type, you will get an error:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"setReady(10);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:s(1398).Z+"",width:"1231",height:"211"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you have complex state, you can use ",(0,r.jsx)(n.code,{children:"interface"}),", for example:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// declare interface\ninterface IUser {\n  firstname: string,\n  lastname: string,\n  age: number\n}\n\n// useState hook\n  const [user, setUser] = useState<IUser | null>(null);\n// or if nullish values are not accepted\n  const [user, setUser] = useState<IUser>({} as IUser);\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can also explicitly define types. For example, if you want to initialize state with ",(0,r.jsx)(n.code,{children:"null"})," or ",(0,r.jsx)(n.code,{children:"undefined"})," value."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const [value, setValue] = useState<string | undefined>(undefined);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Specifying type for array state"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const [values, setValues] = useState<Array<string>>([]);\n\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"forms--events",children:"Forms & Events"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In the example below, the ",(0,r.jsx)(n.code,{children:"inputChanged"})," function is used to handle input element change events. In TypeScript, you have to define event types, otherwise you will the following error."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:s(8510).Z+"",width:"980",height:"400"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The type for input element change event is ",(0,r.jsx)(n.code,{children:"React.ChangeEvent"})]}),"\n",(0,r.jsxs)(n.li,{children:["The type for form submit event is ",(0,r.jsx)(n.code,{children:"React.FormEvent"}),", like shown in the following code."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPerson({...person, [event.target.id]: event.target.value});\n  }\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    // Do something with data\n  }\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The whole ",(0,r.jsx)(n.code,{children:"Form"})," component source code: ",(0,r.jsx)(n.a,{href:"https://github.com/juhahinkula/reactts/blob/main/src/Form.tsx",children:"https://github.com/juhahinkula/reactts/blob/main/src/Form.tsx"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If you have interfaces or types that are common to multiple files, you can define these in a separate file and use ",(0,r.jsx)(n.code,{children:"export"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// interfaces.ts \nexport interface Address {\n  street: string;\n  number: number;\n  zip: number;\n}\n\nexport interface Person {\n  name: string;\n  age: number;\n  address: Address;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Then you can import interfaces to modules where these are used:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Person } from './interfaces';\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"further-reading",children:"Further reading"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["React TypeScript Cheatsheets  ",(0,r.jsx)(n.a,{href:"https://react-typescript-cheatsheet.netlify.app/",children:"https://react-typescript-cheatsheet.netlify.app/"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6415:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/AnyUnknown-7b4070c9588279413347684732ee5e05.PNG"},9409:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/ts_error-2e403d7e77748f45d5e6d6de7431dba7.png"},1398:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/ts_error2-e4971290fa675b8f486bdb4e5d380a01.png"},8510:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/ts_form1-0d2f841bfbf7ebc6005ee1cb9c377694.png"},9344:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/type_example-8ac59b25e652445b8bbab510372fa5a4.PNG"},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>l});var r=s(7294);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);